(define (domain pr2-tamp)
  (:requirements :strips :equality :typing)
  (:predicates
    (controllable )
    (stackable ?o - block_type ?r - block_type)
    (grasp ?o - block_type ?g - grasp_type)
    (kin ?o - block_type ?p - pose_type ?g - grasp_type ?q - conf_type ?t - traj_type)
    (basemotion ?q1 - conf_type ?t - traj_type ?q2 - conf_type)
    (armmotion ?q1 - conf_type ?t - traj_type ?q2 - conf_type)
    (supported ?o - block_type ?p - pose_type ?r - block_type)
    (atpose ?o - block_type ?p - pose_type)
    (atgrasp ?o - block_type ?g - grasp_type)
    (handempty )
    (atbconf ?q - conf_type)
    (ataconf ?q - conf_type)
    (on ?o - block_type ?r - block_type)
    (blue ?o - block_type)
    (blue_region ?o - block_type)
    (red ?o - block_type)
    (red_region ?o - block_type)
    (holding ?o - block_type)
    ;(onred ?o - block_type)
    ;(onblue ?o - block_type)
    (ontarget ?o - block_type)
  )

  (:action pick
    :parameters (?o - block_type ?p - pose_type ?g - grasp_type ?q - conf_type ?t - traj_type)
    :precondition (and (kin ?o ?p ?g ?q ?t)
                       (atpose ?o ?p)
                       (grasp ?o ?g)
                       (handempty ))
    :effect (and (atgrasp ?o ?g) 
                 (not (atpose ?o ?p)) 
                 (not (handempty ))
                 )
  )
  (:action place
    :parameters (?o - block_type ?p - pose_type ?g - grasp_type ?q - conf_type ?t - traj_type)
    :precondition (and (kin ?o ?p ?g ?q ?t)
                       (atgrasp ?o ?g)
                       (not (handempty )))
    :effect (and (atpose ?o ?p)
                 (not (atgrasp ?o ?g))
                 (handempty ))
  )
  
  (:derived (on ?o - block_type ?r - block_type)
    (exists (?p - pose_type) (and (supported ?o ?p ?r)
                      (atpose ?o ?p)))
  )

  ;(:derived (onblue ?o - block_type)
  ;   (exists (?r - block_type) (and (blue ?o) (on ?o ?r) (blue_region ?r)))
  ;)
  ;(:derived (onred ?o - block_type)
  ;   (exists (?r - block_type) (and (red ?o) (on ?o ?r) (red_region ?r)))
  ;)

  (:derived (ontarget ?o - block_type)
     (exists (?r - block_type) (or (and (red ?o) (on ?o ?r) (red_region ?r)) (and (blue ?o) (on ?o ?r) (blue_region ?r))) )
  )
  (:derived (holding ?o - block_type)
    (exists (?g - grasp_type) (and (grasp ?o ?g)
                      (atgrasp ?o ?g)))
  )

)